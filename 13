import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Function to read CSV and return the DataFrame
def getMdata(csv):
    return pd.read_csv(csv)

data = getMdata("C:/Users/92275/Downloads/5KKK.csv")

# Strategy to calculate simple moving averages (SMA) and generate buy/sell signals
def strategy1(data):
    signals = pd.DataFrame(index=data.index)
    signals['price'] = data['High']
    
    # Calculate moving averages
    signals["ma5"] = data["Close"].rolling(window=5).mean()
    signals["ma20"] = data["Close"].rolling(window=20).mean()
    
    # Initialize signal
    signals['signal'] = 0.0
    
    for d in range(1, len(signals)):
        # Check for sell signal (High of current day exceeds high of previous day)
        if data.loc[data.index[d], "High"] > data.loc[data.index[d-1], "High"]:
            signals.loc[data.index[d], 'signal'] = -1  # Sell signal
        # Check for buy signal (Low of current day falls below a recent maximum high)
        elif data.loc[data.index[d], "High"] < signals.loc[:d-1, 'price'].max():
            signals.loc[data.index[d], 'signal'] = 1   # Buy signal
    
    # Create positions column to track the change in signals (buy/sell decision)
    signals['positions'] = signals['signal'].diff()
    
    return signals

# Backtest function with costs
def backtest_with_costs(signals, cost_per_trade, slippage):
    signals['cost'] = cost_per_trade * signals['positions'].abs()
    signals['slippage'] = slippage * signals['price'] * signals['positions'].abs()
    signals['total_cost'] = signals['cost'] + signals['slippage']
    signals['total_return'] = signals['signal'].cumsum() - signals['total_cost'].cumsum()
    
    return signals

# Plotting functions
def plot_candlestick(signals):
    plt.figure(figsize=(10, 6))
    sns.set(style="whitegrid")
    sns.lineplot(data=signals['price'], color='blue', label='Price')
    plt.title('Price Chart')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.show()

def plot_performance(signals):
    plt.figure(figsize=(10, 6))
    sns.set(style="whitegrid")
    sns.lineplot(data=signals['total_return'], color='blue', label='Total Return')
    plt.title('Performance Chart')
    plt.xlabel('Date')
    plt.ylabel('Total Return')
    plt.legend()
    plt.show()

# Simple stop loss and take profit strategy
def stop_loss_take_profit_strategy(data, stop_loss, take_profit):
    signals = pd.DataFrame(index=data.index)
    signals['price'] = data['Close']
    signals['stop_loss'] = signals['price'] * (1 - stop_loss)
    signals['take_profit'] = signals['price'] * (1 + take_profit)
    signals['signal'] = 0
    signals.loc[signals['price'] <= signals['stop_loss'], 'signal'] = -1  # Stop loss
    signals.loc[signals['price'] >= signals['take_profit'], 'signal'] = 1  # Take profit
    signals['positions'] = signals['signal'].diff()
    
    return signals

# Main function
def main():
    # Get signals from strategy1
    signals = strategy1(data)
    
    # Run backtest with costs
    backtest_results = backtest_with_costs(signals, 100, 100000)
    
    # Plot price chart
    plot_candlestick(signals)
    
    # Plot performance chart
    plot_performance(backtest_results)
    
# Call main function
if __name__ == "__main__":
    main()
