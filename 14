import pandas as pd
import numpy
import requests
import chardet

def getMdata(csv):
    a = pd.read_csv(csv)
    a.columns = [i for i in a.columns]
    return a
data = getMdata("C:/Users/92275/Downloads/5KKK.csv")
data1 = getMdata("C:/Users/92275/Downloads/15KKK.csv")
position = 0
trade = pd.DataFrame(columns=[
    "date",
    "cover_time",
    'Sell',
    'cover_price',
    '損益',
    'get',
    "ret",
    "count"])
bg = 1000000
count = 0
count1 = 0
first_entries = data.groupby('Date').first().reset_index()
data = pd.concat([data,data1],ignore_index=True)

print(data)

    
for d in range(data.shape[0]-1):
    c_time = data.index[d]
    date = data.loc[c_time,"Date"]
    time = data.loc[c_time,"Time"]
    daily_data = first_entries[first_entries['Date'] == date]
    # 計算當日的最高點和最低點
    daily_data1 = data[data['Date'] == date]
    d_high = data.loc[data['Date'] == date].loc[:d]['High'].max() if not daily_data.empty else None
    d_low = data.loc[data['Date'] == date].loc[:d]['Low'].min() if not daily_data.empty else None
    # 每日開盤高低點
    td_high = daily_data['High'].values[0] if not daily_data.empty else None
    td_low = daily_data['Low'].values[0] if not daily_data.empty else None
    td_volumn = daily_data['Volumn'].values[0] if not daily_data.empty else None
    c_open = data.loc[c_time,"Open"]
    c_close = data.loc[c_time,"Close"]
    c_high = data.loc[c_time,"High"]
    c_low = data.loc[c_time,"Low"]
    c_volumn = data.loc[c_time,"Volumn"]
    n_time = data.index[d+1]
    b_time = data.index[d-1]
    date1 = data.loc[n_time,"Date"]
    time1 = data.loc[n_time,"Time"]
    n_open = data.loc[n_time,"Open"]
    ma5 =data["Close"].rolling(5).mean()
    ma10 =data["Close"].rolling(10).mean()
    ma20 =data["Close"].rolling(20).mean()
    max15 =data["High"].rolling(20).max()
    volumn_back = data.loc[b_time,"Volumn"]
    # Get time values for the next and previous entries
    time_current = data.loc[data.index[d], 'Time']
    time_previous = data.loc[data.index[d-1], 'Time']

    # Calculate the time difference in minutes
    time_diff_minutes = (time_current - time_previous).total_seconds() / 60

    # Classify based on time difference
    if time_diff_minutes == 5:
        print(f"Data point at {time_current} is 5 minutes apart from the previous one.")
        # Perform actions for 5-minute data here

    elif time_diff_minutes == 15:
        print(f"Data point at {time_current} is 15 minutes apart from the previous one.")
        # Perform actions for 15-minute data here

    if position == 0:
        if c_high >= d_high and data.loc[data.index[d-1], "High"] < data.loc[data['Date'] == date].loc[:d-1]['High'].max():
            position = -1
            order_d = d
            order_price = c_high
            order_unit = 1
            print(date,time,"觸發進場訊號 進場",date,time,"進場價",order_price,"進場",order_unit,"單位","部位" , position)
            
    elif position == -1:
        if  (date > data.loc[data.index[d-1],"Date"]):
            position = 0 
            count=count+1
            cover_price = data.loc[data.index[d-1],"Close"]
            cover_time = data.loc[data.index[d-1],"Time"]
            bg_get = bg+200*(order_price-cover_price)-bg 
            print(date,time,"觸發出場訊號 出場",date,time,"出場價(隔日)",cover_price,"部位",position,bg_get,count)
            ret = 100*(bg_get/bg)
            new_row = pd.Series(
                [
                    date,
                    cover_time,
                    "Sell",
                    cover_price,
                    "損益",
                    bg_get,
                    ret,
                    count,
                    ],
                index=trade.columns
                )
            new_row_df = new_row.to_frame().T
            # 使用 pd.concat 进行合并
            trade = pd.concat([trade, new_row_df], ignore_index=True)
        elif (c_close-order_price)< -50:
            position = 0 
            count=count+1
            cover_price = order_price - 51
            cover_time = time
            bg_get = bg+200*(order_price-cover_price)-bg
            print(date,cover_time,"觸發出場訊號 出場",date1,cover_time,"出場價",cover_price,"部位",position,bg_get,count)
            ret = 100*(bg_get/bg)
            new_row = pd.Series(
                [
                    date,
                    cover_time,
                    "Sell",
                    cover_price,
                    "損益",
                    bg_get,
                    ret,
                    count,
                    ],
                index=trade.columns
                )
            new_row_df = new_row.to_frame().T
            # 使用 pd.concat 进行合并
            trade = pd.concat([trade, new_row_df], ignore_index=True)
        elif (c_high - order_price) >25 :
            position = 0
            count1 = count1 - 1
            cover_price =order_price +25
            cover_time = time
            bg_loss = bg+200*(order_price-cover_price)-bg
            ret = 100*(bg_loss/bg)
            print(date,time,"觸發出場訊號 出場",date,cover_time,"出場",cover_price,"部位",position,bg_loss,count1)
            new_row = pd.Series(
                [
                    date,
                    cover_time,
                    "Sell",
                    cover_price,
                    "損益",
                    bg_loss,
                    ret,
                    count1,
                    ],
                index=trade.columns
                )
            new_row_df = new_row.to_frame().T
            trade = pd.concat([trade, new_row_df], ignore_index=True)
def Performance(trade=pd.DataFrame()):
    if trade.shape[0] == 0:
        print("沒有交易紀錄")
        return False
    
    # 确保 'ret' 列存在
    if 'ret' not in trade.columns:
        print("DataFrame 中不包含 'ret' 列")
        return False
    
    trade1 = trade.copy()
    # 确保以某一列进行排序（假设这里是 'ret' 列）
    trade1 = trade1.sort_values(by='ret')
    trade1 = trade1.reset_index(drop=True)
    
    # 打印交易次数和平均绩效
    print("交易次數 %s" % trade1.shape[0])
    avg_ret = round(trade1["ret"].mean(), 4)
    print("平均績效 %s" % avg_ret ,"%")
    
    earn_trade = trade1[trade1["ret"] > 0]
    earn_ratio = earn_trade.shape[0] / trade1.shape[0] if trade1.shape[0] > 0 else 0
    avg_earn = round(earn_trade["ret"].mean(), 4) if not earn_trade.empty else 0
    print("平均獲利 %s" % avg_earn ,"%")
    
    earn_trade = trade1[trade1["get"] > 0]
    earn_ratio = earn_trade.shape[0] / trade1.shape[0] if trade1.shape[0] > 0 else 0
    max_earn = earn_trade["get"].max() if not earn_trade.empty else 0
    print("最大獲利 %s" % max_earn)
    
    loss_trade = trade1[trade1["ret"] <= 0]
    loss_ratio = round(loss_trade["ret"].mean(), 4) if not loss_trade.empty else 0
    print("平均虧損 %s" % loss_ratio , "%")
    
    loss_trade = trade1[trade1["get"] <= 0]
    loss_ratio1 = loss_trade["get"].min() if not loss_trade.empty else 0
    print("最大虧損 %s" % loss_ratio1)
    
    profit = earn_trade["get"].sum() + loss_trade["get"].sum()
    print("總獲利 %s" % profit)
    
    profit = earn_trade["get"].sum() + loss_trade["get"].sum()
    p_percentage = (profit / bg)*100
    print("總獲利百分 %s" % p_percentage , "%")
    
    count_get =trade1[trade1["count"] > 0]
    count_loss = trade1[trade1["count"] < 0]
    getsum = count_get["count"].max()
    losssum = count_loss["count"].min()
    aa = 100*(getsum / (getsum + (losssum *-1)))
    print("勝率 %s" %  aa,"%")
    
    # 避免除以零
    odds = abs(avg_earn / loss_ratio) if loss_ratio != 0 else float('inf')
    print("賺賠比 %s" % round(odds, 4))

    exp_value = round((earn_ratio * odds - (1 - earn_ratio)), 4)
    print("期望值 %s" % exp_value)
    
    # 最大回撤和新高计算
    DD = []
    NewHigh = []
    TDD = 0 
    MDD = 0 
    acc_profit = 0
    
    for ret in trade1["ret"]:
        acc_profit += ret
        TDD += ret
        if TDD > 0:
            TDD = 0  
            NewHigh.append(acc_profit)
        else:
            NewHigh.append(None)
            MDD = min(MDD, TDD)
        DD.append(TDD)
    
    print("最大資金回落 %s" % round(MDD,4),"%")
    return True

def Performancetocsv(trade=pd.DataFrame(), output_file="performance_output_Bot(4).csv"):
    if trade.shape[0] == 0:
        print("沒有交易紀錄")
        return False
    
    # 確保 'ret' 列存在
    if 'ret' not in trade.columns:
        print("DataFrame 中不包含 'ret' 列")
        return False
    
    trade1 = trade.copy()
    trade1 = trade1.sort_values(by='ret').reset_index(drop=True)
    
    performance_metrics = {}
    
    performance_metrics["交易次數"] = trade1.shape[0]
    performance_metrics["平均績效"] = round(trade1["ret"].mean(), 4)
    
    earn_trade = trade1[trade1["ret"] > 0]
    performance_metrics["平均獲利"] = round(earn_trade["ret"].mean(), 4) if not earn_trade.empty else 0
    performance_metrics["最大獲利"] = earn_trade["get"].max() if not earn_trade.empty else 0
    
    loss_trade = trade1[trade1["ret"] <= 0]
    performance_metrics["平均虧損"] = round(loss_trade["ret"].mean(), 4) if not loss_trade.empty else 0
    performance_metrics["最大虧損"] = loss_trade["get"].min() if not loss_trade.empty else 0
    
    profit = earn_trade["get"].sum() + loss_trade["get"].sum()
    performance_metrics["總獲利"] = profit
    performance_metrics["總獲利百分"] = (profit / bg) * 100
    
    count_get = trade1[trade1["count"] > 0]
    count_loss = trade1[trade1["count"] < 0]
    getsum = count_get["count"].max()
    losssum = count_loss["count"].min()
    performance_metrics["勝率"] = 100 * (getsum / (getsum + (losssum * -1))) if (getsum + (losssum * -1)) != 0 else 0
    
    odds = abs(performance_metrics["平均獲利"] / performance_metrics["平均虧損"]) if performance_metrics["平均虧損"] != 0 else float('inf')
    performance_metrics["賺賠比"] = round(odds, 4)

    earn_ratio = earn_trade.shape[0] / trade1.shape[0] if trade1.shape[0] > 0 else 0
    performance_metrics["期望值"] = round((earn_ratio * odds - (1 - earn_ratio)), 4)

    # 最大回撤和新高计算
    DD = []
    NewHigh = []
    TDD = 0 
    MDD = 0 
    acc_profit = 0
    
    for ret in trade1["ret"]:
        acc_profit += ret
        TDD += ret
        if TDD > 0:
            TDD = 0  
            NewHigh.append(acc_profit)
        else:
            NewHigh.append(None)
            MDD = min(MDD, TDD)
        DD.append(TDD)
    
    performance_metrics["最大資金回落"] = round(MDD, 4)

    # 將結果轉換為 DataFrame 並輸出到 CSV
    performance_df = pd.DataFrame(performance_metrics.items(), columns=["指標", "值"])
    performance_df.to_csv(output_file, index=False, encoding='utf-8-sig')
    
    print(f"Performance metrics saved to {output_file}")
    return True

# 調用 Performance 函數並輸出到 CSV
# Performancetocsv(trade)
Performance(trade)
